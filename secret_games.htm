<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>MiniCatsCraft 3D</title>
  <style>
    body { margin: 0; overflow: hidden; background: #222; }
    canvas { display: block; }
    #info {
      position: absolute; top: 10px; left: 10px; color: white; font-family: sans-serif;
      background: rgba(0,0,0,0.5); padding: 10px; border-radius: 6px;
    }
  </style>
</head>
<body>
  <div id="info">Z Q S D pour te d√©placer üêæ ‚Äî clic gauche pour poser, clic droit pour retirer un bloc</div>
  <script src="https://cdn.jsdelivr.net/npm/three@0.158.0/build/three.min.js"></script>
  <script>
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87ceeb); // ciel bleu

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    camera.position.set(5, 5, 5);
    camera.lookAt(0, 0, 0);

    const renderer = new THREE.WebGLRenderer({antialias: true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Lumi√®re
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(10, 20, 10);
    scene.add(light);

    // Mat√©riaux
    const dirt = new THREE.MeshLambertMaterial({ color: 0x8B4513 });
    const grass = new THREE.MeshLambertMaterial({ color: 0x228B22 });

    // Plateau de blocs
    const blocks = [];
    const gridSize = 10;
    for (let x = 0; x < gridSize; x++) {
      for (let z = 0; z < gridSize; z++) {
        const cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), grass);
        cube.position.set(x, 0, z);
        cube.userData.block = true;
        scene.add(cube);
        blocks.push(cube);
      }
    }

    // Pose/suppression bloc
    window.addEventListener("click", (e) => {
      mouse.x = (e.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(blocks);
      if (intersects.length > 0) {
        const target = intersects[0].object;
        const pos = target.position.clone();
        pos.y += 1;
        const cube = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), dirt);
        cube.position.copy(pos);
        scene.add(cube);
        blocks.push(cube);
      }
    });

    window.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      mouse.x = (e.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(blocks);
      if (intersects.length > 0) {
        const target = intersects[0].object;
        scene.remove(target);
        blocks.splice(blocks.indexOf(target), 1);
      }
    });

    const keys = {};
    window.addEventListener("keydown", e => keys[e.key.toLowerCase()] = true);
    window.addEventListener("keyup", e => keys[e.key.toLowerCase()] = false);

    const clock = new THREE.Clock();
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      const speed = 5 * delta;
      if (keys["z"]) camera.position.z -= speed;
      if (keys["s"]) camera.position.z += speed;
      if (keys["q"]) camera.position.x -= speed;
      if (keys["d"]) camera.position.x += speed;
      renderer.render(scene, camera);
    }
    animate();
  </script>
</body>
</html>
