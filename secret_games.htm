<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>MiniCatsCraft 3D</title>
  <style>
    body { margin: 0; overflow: hidden; font-family: sans-serif; background: #222; }
    #ui {
      position: absolute; top: 10px; left: 10px; color: white;
      background: rgba(0,0,0,0.6); padding: 8px; border-radius: 6px;
      font-size: 14px;
    }
    #typeHUD {
      position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);
      color: white; background: rgba(0,0,0,0.6);
      padding: 8px 14px; border-radius: 6px;
      font-size: 16px;
    }
  </style>
</head>
<body>
  <div id="ui">FPS: <span id="fps">--</span></div>
  <div id="typeHUD">Bloc: <span id="blockType">grass</span></div>

  <script src="https://cdn.jsdelivr.net/npm/three@0.158.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.158.0/examples/js/controls/PointerLockControls.js"></script>
  <script>
    // Scene setup
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xadd8e6);

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Lights
    scene.add(new THREE.AmbientLight(0xffffff, 0.6));
    const sun = new THREE.DirectionalLight(0xffffff, 0.8);
    sun.position.set(30, 50, 30);
    scene.add(sun);

    // Controls
    const controls = new THREE.PointerLockControls(camera, renderer.domElement);
    document.body.addEventListener("click", () => controls.lock());
    scene.add(controls.getObject());

    // Materials
    const mats = {
      grass: new THREE.MeshLambertMaterial({ color: 0x228B22 }),
      dirt: new THREE.MeshLambertMaterial({ color: 0x8B4513 }),
      stone: new THREE.MeshLambertMaterial({ color: 0xaaaaaa })
    };
    const blockKeys = Object.keys(mats);
    let selectedIndex = 0;
    let selectedType = blockKeys[selectedIndex];
    document.getElementById("blockType").textContent = selectedType;

    window.addEventListener("wheel", e => {
      selectedIndex = (selectedIndex + (e.deltaY > 0 ? 1 : -1) + blockKeys.length) % blockKeys.length;
      selectedType = blockKeys[selectedIndex];
      document.getElementById("blockType").textContent = selectedType;
    });

    // Base terrain
    const blocks = [];
    for (let x = -8; x <= 8; x++) {
      for (let z = -8; z <= 8; z++) {
        const cube = new THREE.Mesh(new THREE.BoxGeometry(1,1,1), mats.grass);
        cube.position.set(x, 0, z);
        scene.add(cube);
        blocks.push(cube);
      }
    }

    // Input
    const keys = {};
    document.addEventListener("keydown", e => keys[e.key.toLowerCase()] = true);
    document.addEventListener("keyup", e => keys[e.key.toLowerCase()] = false);

    // Raycaster
    const raycaster = new THREE.Raycaster();

    // Mouse actions
    function handleClick(placeBlock = true) {
      raycaster.setFromCamera({x:0, y:0}, camera);
      const hits = raycaster.intersectObjects(blocks);
      if (hits.length > 0) {
        const hit = hits[0];
        if (placeBlock) {
          const pos = hit.point.clone().add(hit.face.normal).floor();
          const cube = new THREE.Mesh(new THREE.BoxGeometry(1,1,1), mats[selectedType]);
          cube.position.copy(pos);
          scene.add(cube);
          blocks.push(cube);
        } else {
          scene.remove(hit.object);
          blocks.splice(blocks.indexOf(hit.object), 1);
        }
      }
    }
    document.addEventListener("mousedown", e => {
      if (!controls.isLocked) return;
      if (e.button === 0) handleClick(true);
      if (e.button === 2) handleClick(false);
    });
    document.addEventListener("contextmenu", e => e.preventDefault());

    // Movement
    const clock = new THREE.Clock();
    function movePlayer(delta) {
      const speed = 4;
      const direction = new THREE.Vector3();
      controls.getDirection(direction);
      direction.y = 0; direction.normalize();
      const right = new THREE.Vector3().crossVectors(direction, camera.up).normalize();

      if (keys["z"]) controls.getObject().position.add(direction.clone().multiplyScalar(speed * delta));
      if (keys["s"]) controls.getObject().position.add(direction.clone().multiplyScalar(-speed * delta));
      if (keys["q"]) controls.getObject().position.add(right.clone().multiplyScalar(-speed * delta));
      if (keys["d"]) controls.getObject().position.add(right.clone().multiplyScalar(speed * delta));
    }

    // FPS counter
    let last = performance.now();
    function updateFPS() {
      const now = performance.now();
      const fps = Math.round(1000 / (now - last));
      last = now;
      document.getElementById("fps").textContent = fps;
    }

    // Render loop
    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      movePlayer(delta);
      updateFPS();
      renderer.render(scene, camera);
    }
    animate();
  </script>
</body>
</html>
