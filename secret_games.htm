<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>MiniCatsCraft 3D</title>
  <style>
    html, body { margin: 0; overflow: hidden; background: #222; }
    #fps {
      position: absolute; top: 10px; left: 10px; color: white;
      font-family: monospace; background: rgba(0,0,0,0.5); padding: 6px;
      border-radius: 4px;
    }
    #blockType {
      position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);
      color: white; font-family: sans-serif; background: rgba(0,0,0,0.5);
      padding: 6px 10px; border-radius: 5px;
    }
  </style>
</head>
<body>
  <div id="fps">FPS: --</div>
  <div id="blockType">Bloc: <span id="type">grass</span></div>
  <script src="https://cdn.jsdelivr.net/npm/three@0.158.0/build/three.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/three@0.158.0/examples/js/controls/PointerLockControls.js"></script>
  <script>
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x87ceeb);

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({antialias:true});
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Lights
    scene.add(new THREE.AmbientLight(0xffffff, 0.6));
    const sun = new THREE.DirectionalLight(0xffffff, 0.8);
    sun.position.set(10, 50, 10);
    scene.add(sun);

    // Controls
    const controls = new THREE.PointerLockControls(camera, document.body);
    document.body.addEventListener('click', () => controls.lock());
    scene.add(controls.getObject());

    const keys = {};
    document.addEventListener("keydown", e => keys[e.key.toLowerCase()] = true);
    document.addEventListener("keyup", e => keys[e.key.toLowerCase()] = false);

    // Materials
    const mats = {
      grass: new THREE.MeshLambertMaterial({color:0x228B22}),
      dirt: new THREE.MeshLambertMaterial({color:0x8B4513}),
      stone: new THREE.MeshLambertMaterial({color:0xaaaaaa})
    };
    const types = Object.keys(mats);
    let typeIndex = 0;
    let selectedType = types[typeIndex];
    document.getElementById("type").textContent = selectedType;

    // Scroll block type
    window.addEventListener("wheel", e => {
      typeIndex = (typeIndex + (e.deltaY > 0 ? 1 : -1) + types.length) % types.length;
      selectedType = types[typeIndex];
      document.getElementById("type").textContent = selectedType;
    });

    // Ground base
    const blocks = [];
    for (let x=0; x<16; x++) {
      for (let z=0; z<16; z++) {
        const cube = new THREE.Mesh(new THREE.BoxGeometry(1,1,1), mats.grass);
        cube.position.set(x,0,z);
        scene.add(cube);
        blocks.push(cube);
      }
    }

    // Raycaster for block interaction
    const raycaster = new THREE.Raycaster();
    const click = (e, remove) => {
      raycaster.setFromCamera({x:0,y:0}, camera);
      const hits = raycaster.intersectObjects(blocks);
      if (hits.length > 0) {
        const h = hits[0];
        if (remove) {
          scene.remove(h.object);
          blocks.splice(blocks.indexOf(h.object), 1);
        } else {
          const pos = h.point.clone().add(h.face.normal).floor();
          const cube = new THREE.Mesh(new THREE.BoxGeometry(1,1,1), mats[selectedType]);
          cube.position.copy(pos);
          scene.add(cube);
          blocks.push(cube);
        }
      }
    };
    document.addEventListener("mousedown", e => {
      if (!controls.isLocked) return;
      if (e.button === 0) click(e, false); // gauche → place
      else if (e.button === 2) click(e, true); // droit → retire
    });
    document.addEventListener("contextmenu", e => e.preventDefault());

    // FPS counter
    let fpsText = document.getElementById("fps");
    let last = performance.now();
    function updateFPS() {
      const now = performance.now();
      const fps = Math.round(1000 / (now - last));
      last = now;
      fpsText.textContent = `FPS: ${fps}`;
    }

    // Player movement
    const clock = new THREE.Clock();
    const velocity = new THREE.Vector3();
    const speed = 5;
    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      updateFPS();

      // movement
      const dir = new THREE.Vector3();
      controls.getDirection(dir);
      dir.y = 0; dir.normalize();
      const right = new THREE.Vector3().crossVectors(dir, camera.up).normalize();

      if (keys["z"]) controls.getObject().position.add(dir.clone().multiplyScalar(speed * delta));
      if (keys["s"]) controls.getObject().position.add(dir.clone().multiplyScalar(-speed * delta));
      if (keys["q"]) controls.getObject().position.add(right.clone().multiplyScalar(-speed * delta));
      if (keys["d"]) controls.getObject().position.add(right.clone().multiplyScalar(speed * delta));

      renderer.render(scene, camera);
    }
    animate();
  </script>
</body>
</html>
